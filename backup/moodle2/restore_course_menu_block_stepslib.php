<?php

class restore_course_menu_block_structure_step extends restore_structure_step
{

    /**
     * @inheritDoc
     */
    protected function define_structure()
    {

        $paths = [];

        $paths[] = new restore_path_element('course_menu', '/block/course_menu', true);
        $paths[] = new restore_path_element('course_menu_section',
            '/block/course_menu/course_menu_sections/course_menu_section');
        $paths[] = new restore_path_element('course_menu_button',
            '/block/course_menu/course_menu_buttons/course_menu_button');

        return $paths;
    }

    public function process_block($data)
    {
        global $DB;
        $data = (object)$data;

    }

    public function process_course_menu($data)
    {
        global $DB, $USER;

        if (!$this->task->get_blockid()) {
            return;
        }
        // COnvert array to object
        $data = (object)$data;

        $context = \context_block::instance($this->task->get_blockid());

        $params = [
            'instance' => $this->task->get_blockid(),
            'courseid' => $this->task->get_courseid()
        ];

        // Insert record
        if (!$exists = $DB->record_exists('block_course_menu', $params)) {
            // Create course menu object
            $course_menu_params = new stdClass();
            $course_menu_params->instance = $this->task->get_blockid();
            $course_menu_params->courseid = $this->task->get_courseid();
            $course_menu_params->section_zero = $data->section_zero;
            $course_menu_params->usermodified = $USER->id;
            $course_menu_params->timemodified = time();
            $course_menu_params->timecreated = time();
            $new_id = $DB->insert_record('block_course_menu', $course_menu_params);
            // Add sections
            $sections = $data->course_menu_sections['course_menu_section'];
            foreach ($sections as $key => $section) {
                $section = (object)$section;
                $old_section_id = $section->id;
                $section->coursemenuid = $new_id;
                $section->usermodified = $USER->id;
                $section->timemodified = time();
                $section->timecreated = time();
                $new_section_id = $DB->insert_record('block_course_menu_section', $section);
                // restore file
                $this->restore_file($context->id, $old_section_id, $new_section_id, 'section_background');
                $this->restore_file($context->id, $old_section_id, $new_section_id, 'section_image');
            }
            // Add buttons
            $buttons = $data->course_menu_buttons['course_menu_button'];
            foreach ($buttons as $key => $button) {
                $button = (object)$button;
                $old_button_id = $button->id;
                $button->coursemenuid = $new_id;
                $button->usermodified = $USER->id;
                $button->timemodified = time();
                $button->timecreated = time();
                $new_button_id = $DB->insert_record('block_course_menu_button', $button);
                $this->restore_file($context->id, $old_button_id, $new_button_id, 'button_background');
                $this->restore_file($context->id, $old_button_id, $new_button_id, 'button_image');
            }
        } else {
            return;
        }
    }

    /**
     * Update CMIDs for all buttons
     * @return void
     * @throws dml_exception
     */
    protected function after_restore()
    {
        global $DB;
        parent::after_restore(); // TODO: Change the autogenerated stub
        // Get course menu id
        $course_menu = $DB->get_record('block_course_menu', ['instance' => $this->task->get_blockid()]);
        // Get buttons
        $buttons = $DB->get_records('block_course_menu_button', ['coursemenuid' => $course_menu->id]);
        // Update cmid for all buttons
        foreach ($buttons as $button) {
            // Get module id
            // If module exists continue
            if ($module = $DB->get_record('modules', ['name' => $button->mod_name])) {
                // Check to see if module instance exists
                if ($mod_instance = $DB->get_record($button->mod_name, [
                    'name' => $button->mod_title,
                    'course' => $this->task->get_courseid()])) {
                    // Check to see if course module exists
                    if ($mod_cm = $DB->get_record('course_modules', [
                        'module' => $module->id,
                        'instance' => $mod_instance->id,
                        'course' => $this->task->get_courseid()])) {
                        // If the record is found, update the cmid
                        $button->cmid = $mod_cm->id;
                        // Update button
                        $DB->update_record('block_course_menu_button', $button);
                    }
                }
            }
        }
        // Clear course cache
        rebuild_course_cache($course_menu->courseid);
    }

    /**
     * Restore file
     * @param $contextid
     * @param $old_section_id
     * @param $new_section_id
     * @param $filearea
     * @return void
     * @throws dml_exception
     */
    protected function restore_file($contextid, $old_item_id, $new_item_id, $filearea) {
        global $DB;
        $sql = "SELECT 
                    * 
                FROM 
                    {files} 
                WHERE 
                    component = 'block_course_menu' AND
                    contextid = ? AND 
                    filearea = ? AND
                    itemid = ? AND
                    filename != '.'
                    ";
        if ($old_file = $DB->get_record_sql($sql, [$contextid, $filearea, $old_item_id])) {
            $fs = get_file_storage();
            $fileinfo = array(
                'component' => 'block_course_menu',     // usually = table name
                'filearea' => $filearea,     // usually = table name
                'itemid' => $old_item_id,               // usually = ID of row in table
                'contextid' => $contextid, // ID of context
                'filepath' => '/',
                'filename' => $old_file->filename); // any filename
            $file = $fs->get_file($fileinfo['contextid'], $fileinfo['component'], $fileinfo['filearea'],
                $fileinfo['itemid'], $fileinfo['filepath'], $fileinfo['filename']);
            $content = $file->get_content();
            if ($file) {
                // Create new file for this item
                $fileinfo['itemid'] = $new_item_id;
                $fs->create_file_from_string($fileinfo, $content);
                // Delete old file
                $file->delete();
            }

        }
    }
}